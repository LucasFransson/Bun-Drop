// Mixin for setting up flex & wrap value, defaults to wrap if no argument is passed
@mixin flex($type: wrap) {
	display: flex;
	flex-wrap: $type;
	height: 100vh;
}

@mixin grid-auto($maxWidth, $fr, $grid-gap) {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax($maxWidth, $frfr));
	grid-gap: $grid-gap;
}

@mixin grid($columns, $fr, $grid-gap) {
	display: grid;
	grid-template-rows: repeat($columns, $fr);
	grid-gap: $grid-gap;
}

// Mixin/shorthand for setting a gradient background
@mixin gradient($color-start, $color-end, $orientation) {
	background-image: linear-gradient(to $orientation, $color-start, $color-end);
}

// mixin for making an element a circle
@mixin circle {
	@include border-radius(100%);
}

// Mixin for setting an element to full width & height
@mixin fullWidth {
	width: 100%;
	height: 100%;
}

// Mixin for centering an element horizontally and vertically
@mixin centerAbsolute {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}
// Mixin for centering an element vertically
@mixin vertical-align {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}
// Mixin for centering an element horizontally
@mixin horizontal-align {
	position: relative;
	left: 50%;
	transform: translateX(-50%);
}

// MEDIA QUERY MANAGER
/*
0-600px:Phone
6-900px: Tablet Portrait
9-1200px: Tablet Landscape
12-1800px: (Default) Desktop
1800px+: Big Desktop

$breakpoint argument choices
-phone 
-tab-port
-tab-land
-big-desktop
*/

// 1em = 16px
@mixin responsive($breakpoint) {
	@if $breakpoint == phone {
		@media (max-width: 37.5em) {
			//<600px
			@content;
		}
	}
	@if $breakpoint == tab-port {
		@media (max-width: 56.25em) {
			//<900px
			@content;
		}
	}
	@if $breakpoint == tab-land {
		@media (max-width: 75em) {
			//<1200px
			@content;
		}
	}
	@if $breakpoint == big-desktop {
		@media (min-width: 112.25em) {
			//>1800px
			@content;
		}
	}
}
